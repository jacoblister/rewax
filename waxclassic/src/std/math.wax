(@pragma once)

(extern acos   (param x float) (result float))
(extern asin   (param x float) (result float))
(extern atan   (param x float) (result float))
(extern cos    (param x float) (result float))
(extern cosh   (param x float) (result float))
(extern sin    (param x float) (result float))
(extern sinh   (param x float) (result float))
(extern tan    (param x float) (result float))
(extern tanh   (param x float) (result float))
(extern exp    (param x float) (result float))
(extern log    (param x float) (result float))
(extern sqrt   (param x float) (result float))
(extern ceil   (param x float) (result float))
(extern floor  (param x float) (result float))
(extern fabs   (param x float) (result float))
(extern round  (param x float) (result float))
(extern atan2  (param x float) (param y float) (result float))
(extern pow    (param x float) (param y float) (result float))
(extern fmax   (param x float) (param y float) (result float))
(extern fmin   (param x float) (param y float) (result float))
(extern abs    (param x int) (result int))
(extern random (result float))
(extern INFINITY float)


(@if TARGET_C 1
	(asm "#define random() ((float)rand()/RAND_MAX)\n")
)

(@if TARGET_CPP 1
	(asm "#define random() ((float)rand()/RAND_MAX)\n")
)

(@if TARGET_JAVA 1
	(asm "public static float fabs(float x){return Math.abs(x);}\n")
	(asm "public static float fmin(float x, float y){return Math.min(x,y);}\n")
	(asm "public static float fmax(float x, float y){return Math.max(x,y);}\n")
	(asm "public static final float INFINITY = Float.POSITIVE_INFINITY;\n")
)

(@if TARGET_TS 1
	(asm "const acos  = Math.acos  ;\n")
	(asm "const asin  = Math.asin  ;\n")
	(asm "const atan  = Math.atan  ;\n")
	(asm "const cos   = Math.cos   ;\n")
	(asm "const sin   = Math.sin   ;\n")
	(asm "const tan   = Math.tan   ;\n")
	(asm "const exp   = Math.exp   ;\n")
	(asm "const log   = Math.log   ;\n")
	(asm "const sqrt  = Math.sqrt  ;\n")
	(asm "const ceil  = Math.ceil  ;\n")
	(asm "const floor = Math.floor ;\n")
	(asm "const fabs  = Math.abs   ;\n")
	(asm "const fmin  = Math.min   ;\n")
	(asm "const fmax  = Math.max   ;\n")
	(asm "const atan2 = Math.atan2 ;\n")
	(asm "const pow   = Math.pow   ;\n")
	(asm "const abs   = Math.abs   ;\n")
	(asm "const round = Math.round ;\n")
	(asm "const random= Math.random;\n")
	(asm "const INFINITY = Infinity;\n")
	(asm "// @ts-ignore\n")
	(asm "const sinh  = Math.sinh ;\n")
	(asm "// @ts-ignore\n")
	(asm "const cosh  = Math.cosh ;\n")
	(asm "// @ts-ignore\n")
	(asm "const tanh  = Math.tanh ;\n")
)

(@if TARGET_PY 1
	(asm "from math import *\n")
	(asm "from random import random\n")
	(asm "INFINITY = float('inf')\n")
	(asm "fabs = abs\n")
	(asm "fmin = min\n")
	(asm "fmax = max\n")
)


(@if TARGET_CS 1
	(asm "public static Func<double,double> acos     = Math.Acos   ;\n")
	(asm "public static Func<double,double> asin     = Math.Asin   ;\n")
	(asm "public static Func<double,double> atan     = Math.Atan   ;\n")
	(asm "public static Func<double,double> cos      = Math.Cos    ;\n")
	(asm "public static Func<double,double> sin      = Math.Sin    ;\n")
	(asm "public static Func<double,double> tan      = Math.Tan    ;\n")
	(asm "public static Func<double,double> exp      = Math.Exp    ;\n")
	(asm "public static Func<double,double> log      = Math.Log    ;\n")
	(asm "public static Func<double,double> sqrt     = Math.Sqrt   ;\n")
	(asm "public static Func<double,double> ceil     = Math.Ceiling;\n")
	(asm "public static Func<double,double> floor    = Math.Floor  ;\n")
	(asm "public static Func<double,double> fabs     = Math.Abs    ;\n")
	(asm "public static Func<double,double> sinh     = Math.Sinh   ;\n")
	(asm "public static Func<double,double> cosh     = Math.Cosh   ;\n")
	(asm "public static Func<double,double> tanh     = Math.Tanh   ;\n")
	(asm "public static Func<double,double> round    = Math.Round  ;\n")
	(asm "public static Func<int,int> abs            = Math.Abs    ;\n")
	(asm "public static Func<double,double,double> atan2 = Math.Atan2 ;\n")
	(asm "public static Func<double,double,double> pow   = Math.Pow   ;\n")
	(asm "public static Func<double,double,double> fmin  = Math.Min   ;\n")
	(asm "public static Func<double,double,double> fmax  = Math.Max   ;\n")
	(asm "public static float INFINITY = Single.PositiveInfinity;\n")
	(asm "public static Random w_RNG = new Random();\n")
	(asm "public static float random(){ return (float)w_RNG.NextDouble(); }\n")

)


(@if TARGET_SWIFT 1
	(asm "static var w_seed : UInt32 = 0x5EED;\n")
	(asm "static func random()->Float{w_seed^=(w_seed<<17);w_seed^=(w_seed>>13);w_seed^=(w_seed<<5);return Float(w_seed)/Float(4294967295);}\n")
	(asm "static var INFINITY : Float = Float.infinity\n")
	(asm "static func acos (x:Float)->Float{return Foundation.acos (x);}\n")
	(asm "static func asin (x:Float)->Float{return Foundation.asin (x);}\n")
	(asm "static func atan (x:Float)->Float{return Foundation.atan (x);}\n")
	(asm "static func cos  (x:Float)->Float{return Foundation.cos  (x);}\n")
	(asm "static func cosh (x:Float)->Float{return Foundation.cosh (x);}\n")
	(asm "static func sin  (x:Float)->Float{return Foundation.sin  (x);}\n")
	(asm "static func sinh (x:Float)->Float{return Foundation.sinh (x);}\n")
	(asm "static func tan  (x:Float)->Float{return Foundation.tan  (x);}\n")
	(asm "static func tanh (x:Float)->Float{return Foundation.tanh (x);}\n")
	(asm "static func exp  (x:Float)->Float{return Foundation.exp  (x);}\n")
	(asm "static func log  (x:Float)->Float{return Foundation.log  (x);}\n")
	(asm "static func sqrt (x:Float)->Float{return Foundation.sqrt (x);}\n")
	(asm "static func ceil (x:Float)->Float{return Foundation.ceil (x);}\n")
	(asm "static func floor(x:Float)->Float{return Foundation.floor(x);}\n")
	(asm "static func fabs (x:Float)->Float{return Swift.abs   (x);}\n")
	(asm "static func round(x:Float)->Float{return Foundation.round(x);}\n")
	(asm "static func atan2(x:Float,y:Float)->Float{return Foundation.atan2(x,y);}\n")
	(asm "static func pow  (x:Float,y:Float)->Float{return Foundation.pow  (x,y);}\n")
	(asm "static func fmax (x:Float,y:Float)->Float{return Foundation.fmax (x,y);}\n")
	(asm "static func fmin (x:Float,y:Float)->Float{return Foundation.fmin (x,y);}\n")
	(asm "static func abs  (x:Int)          ->Int  {return Swift.abs   (x);  }\n")
)

(@if TARGET_LUA 1
	(asm "do for k,v in pairs(math) do _G[k]=v end end\n")
	(asm "function round(x) return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5) end\n")
	(asm "local INFINITY = huge\n")
	(asm "local fmax = max\n")
	(asm "local fmin = min\n")
	(asm "local fabs = abs\n\n")
)
