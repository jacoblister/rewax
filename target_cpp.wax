; ----------------------------------------------------------------------------
; - C++ language target -
; ----------------------------------------------------------------------------

(func node_to_cpp_preprocess (param node (struct node)) (result str)
	(let value str (get node value))
	(if (= (get node type) @NODE_PREPROCESS) (then
		(set value "")
		(for i 1 (< i (# (get node value))) 1 (do
			(<< value (get (get node value) i))
		))
	))
	(return value)
)

(func node_to_cpp_type (param node (struct node)) (result str)
	(let type str (get node value))

	(if (= (get node value) "str") (then
		(set type "std::string")
	))
	(if (= (get node value) "vec") (then
		(set type "std::array<")
		(<< type (call node_to_cpp_type (get node child 1)))
		(<< type ",")
		(<< type (call node_to_cpp_preprocess (get node child 0)))
		(<< type ">")
	))
	(if (= (get node value) "arr") (then
		(set type "std::vector<")
		(<< type (call node_to_cpp_type (get node child 0)))
		(<< type ">")
	))
	(if (= (get node value) "struct") (then
		(set type "struct ")
		(<< type (get node child 0 value))
		(<< type "*")
	))
	(if (= type "map") (then
		(set type "std::map<")
		(<< type (call node_to_cpp_type (get node child 0)))
		(<< type ",")
		(<< type (call node_to_cpp_type (get node child 1)))
		(<< type ">")
	))
	(if (= type "func") (then
		(let return_type str "void")
		(let params str "void")
		(let i int 0)
		(while (< i (# (get node child))) (do
			(let child_node (struct node) (get node child i))
			(if (= (get child_node value) "param") (then
				(if (= params "void") (then
					(set params "")
				) (else
					(<< params ", ")
				))
				(let type str "")
				(set type (call node_to_cpp_type (get child_node child 1)))
				(if (||
					(= (get child_node child 1 value) "vec")
					(= (get child_node child 1 value) "arr")
					(= (get child_node child 1 value) "map")
				) (then
					(<< type "&")
				))
				(<< params type)
				(<< params " ")
				(<< params (get (get child_node child 0) value))

				(remove (get node child) i 1)
				(set i (- i 1))
			))
			(if (= (get child_node value) "result") (then
				(set return_type (call node_to_cpp_type (get child_node child 0)))
				(remove (get node child) i 1)
				(set i (- i 1))
			))
			(set i (+ i 1))
		))

		(let function str "")
		(if (> (# (get node child)) 0) (then
			(if (= (get node child 0 type) @NODE_STR) (then
				(let func_name str (get node child 0 value))
				(if (= func_name "main") (then
					(set func_name "main_args")
					(set params "std::vector<std::string>& args")
					(set return_type "int")
				))
				(<< function return_type)
				(<< function " ")
				(<< function func_name)
				(<< function "(")
				(<< function params)
				(<< function ")")
			) (else
				(<< function "[=](")
				(<< function params)
				(<< function ")")
			))
		) (else
			(<< function "std::function<")
			(<< function return_type)
			(<< function " (")
			(<< function params)
			(<< function ")>")
		))

		(set type function)
	))

	(return type)
)

(func node_to_cpp (param depth int) (param node (struct node)) (result str)
	(let s str (alloc str ""))

	(set depth (+ depth 1))
	(set node (call node_copy node))

	(if (= (get node type) @NODE_ROOT) (then
		(<< s "#include <iostream>\n")
		(<< s "#include <sstream>\n")
		(<< s "#include <string>\n")
		(<< s "#include <vector>\n")
		(<< s "#include <array>\n")
		(<< s "#include <map>\n")
		(<< s "#include <functional>\n")
		(<< s "template<typename T> std::string tostring(const T& x) {\n")
		(<< s "  std::stringstream ss;\n")
		(<< s "  ss << x;\n")
		(<< s "  return ss.str();\n")
		(<< s "}\n")
		(<< s "\n\n")

		(let has_main int 0)
		(for i 0 (< i (# (get node child))) 1 (do
			(if (&&
				(= (get node child i value) "func")
				(= (get node child i child 0 value) "main")
			) (then
				(set has_main 1)
			))

			(let child str (call node_to_cpp 0 (get node child i)))
			(<< s child)

			(if (= (get node child i value) "let") (then
				(<< s ";")
			))

			(<< s "\n")
		))

		(if has_main (then
			(<< s "int main(int argc, char** argv) {\n")
			(<< s "  std::vector<std::string> args(argv, argv + argc);\n")
			(<< s "  return main_args(args);\n")
			(<< s "};\n")
		))
	))

	(if (||
		(= (get node value) "+")
		(= (get node value) "&&")
		(= (get node value) "||")
	) (then
		(set node (call node_expand node))
	))

	(if (= (get node type) @NODE_EXPR) (then
		(let block_start str (alloc str "("))
		(<< block_start (get node value))
		(let block_end str (alloc str ")"))
		(let block_seperator str (alloc str " "))

		(if (= (get node value) "") (then
			(set block_start "{")
			(set block_end "}")
		))
		(if (= (get node value) "@define") (then
			(set block_start "#define ")
			(<< block_start (get node child 0 value))
			(<< block_start " ")
			(<< block_start (get node child 1 value))

			(set block_end "")
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "@if") (then
			(set block_start "")
			(set block_end "")
			(if (= (get node child 0 value) "TARGET_CPP") (then
				(remove (get node child) 0 1)
				(remove (get node child) 0 1)
			) (else
				(while (> (# (get node child)) 0) (do
					(remove (get node child) 0 1)
				))
			))
		))
		(if (= (get node value) "extern") (then
			(set block_start "")
			(set block_end "")
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "asm") (then
			(let quotedline str (get node child 0 value))
			(let line str "")
			(for j 1 (< j (- (# quotedline) 1)) 1 (do
				(if (<> (get quotedline j) 92) (then
					(<< line (get quotedline j))
				))
			))

			(set block_start line)
			(set block_end "\n")
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "struct") (then
			(set block_start "struct ")
			(<< block_start (get node child 0 value))
			(<< block_start " {")
			(set block_end "};")
			(remove (get node child) 0 1)
		))
		(if (= (get node value) "func") (then
			(set block_start (call node_to_cpp_type node))
			(<< block_start " {")
			(set block_end "}")
			(if (= (get node child 0 type) @NODE_STR) (then
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "call") (then
			(let fname_node (struct node) (get node child 0))
			(set block_start (get fname_node value))
			(<< block_start "(")
			(set block_end ")")
			(remove (get node child) 0 1)
			(set block_seperator ", ")
		))
		(if (||
			(= (get node value) "let")
			(= (get node value) "local")
		) (then
			(let type str (call node_to_cpp_type (get node child 1)))
			(set block_start type)
			(<< block_start " ")
			(set block_end "")

			(remove (get node child) 1 1)
			(if (= (# (get node child)) 2) (then
				(insert (get node child) 1 (call node_new @NODE_STR "="))
			))
		))
		(if (= (get node value) "alloc") (then
			(set block_start "")
			(set block_end "")

			(if (= (get node child 0 value) "str") (then
				(set block_start "\"\"")
				(if (> (# (get node child)) 1) (then
					(set block_start (get node child 1 value))
				))
			))
			(if (= (get node child 0 type) @NODE_EXPR) (then
				(if (||
					(= (get node child 0 value) "vec")
					(= (get node child 0 value) "arr")
				) (then
					(if (= (# (get node child)) 1) (then
						(let init str (call node_to_cpp_type (get node child 0)))
						(<< init "()")
						(set block_start init)
					) (else
						(set block_start "{")
						(for i 1 (< i (# (get node child))) 1 (do
							(<< block_start (call node_to_cpp depth (get node child i)))
							(if (< i (- (# (get node child)) 1)) (then
								(<< block_start ",")
							))
						))
						(<< block_start "}")
					))
				))
				(if (= (get node child 0 value) "struct") (then
					(set block_start "new ")
					(<< block_start (get node child 0 child 0 value))
					(<< block_start "()")
				))
				(if (= (get node child 0 value) "map") (then
					(set block_start "{}")
				))
			))

			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "free") (then
			(set block_start "/*GC*/")
			(set block_end "")

			(remove (get node child) 0 1)
		))
		(if (= (get node value) "#") (then
			(set block_start "")
			(set block_end ".size()")
		))
		(if (= (get node value) "insert") (then
			(let array str (call node_to_cpp depth (get node child 0)))
			(let position str (call node_to_cpp depth (get node child 1)))
			(let value str (call node_to_cpp depth (get node child 2)))
			(set block_start array)
			(<< block_start ".insert(")
			(<< block_start array)
			(<< block_start ".begin()+")
			(<< block_start position)
			(<< block_start ",")
			(<< block_start value)
			(set block_end ")")
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "remove") (then
			(if (= (# (get node child)) 2) (then
				(set block_start (call node_to_cpp depth (get node child 0)))
				(<< block_start ".erase(")
				(<< block_start (call node_to_cpp depth (get node child 1)))
				(set block_end ")")
			) (else
				(let array str (call node_to_cpp depth (get node child 0)))
				(let first str (call node_to_cpp depth (get node child 1)))
				(let last str (call node_to_cpp depth (get node child 2)))
				(set block_start array)
				(<< block_start ".erase(")
				(<< block_start array)
				(<< block_start ".begin()+")
				(<< block_start first)
				(<< block_start ",")
				(<< block_start array)
				(<< block_start ".begin()+")
				(<< block_start first)
				(<< block_start "+")
				(<< block_start last)
				(set block_end ")")
			))
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "slice") (then
			(set block_start (call node_to_cpp depth (get node child 0)))
			(<< block_start ".substr(")
			(<< block_start (call node_to_cpp depth (get node child 1)))
			(<< block_start ",")
			(<< block_start (call node_to_cpp depth (get node child 2)))
			(set block_end ")")
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "get") (then
			(set block_start (call node_to_cpp depth (get node child 0)))
			(set block_end "")
			(for i 1 (< i (# (get node child))) 1 (do
				(let child (struct node) (get node child i))
				(if (&& (= (get child type) @NODE_STR) (> (# (get child value)) 1)) (then
					(<< block_end "->")
					(<< block_end (call node_to_cpp depth (get node child i)))
					(<< block_end "")
				) (else
					(<< block_end "[")
					(<< block_end (call node_to_cpp depth (get node child i)))
					(<< block_end "]")
				))
			))
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "set") (then
			(set block_start (call node_to_cpp depth (get node child 0)))
			(set block_end "")
			(let n int (- (# (get node child)) 1))
			(for i 1 (< i n) 1 (do
				(let child (struct node) (get node child i))
				(if (&& (= (get child type) @NODE_STR) (> (# (get child value)) 1)) (then
					(<< block_end "->")
					(<< block_end (call node_to_cpp depth (get node child i)))
					(<< block_end "")
				) (else
					(<< block_end "[")
					(<< block_end (call node_to_cpp depth (get node child i)))
					(<< block_end "]")
				))
			))
			(<< block_end " = ")
			(<< block_end (call node_to_cpp depth (get node child n)))

			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "cast") (then
			(if (= (get node child 1 value) "str") (then
				(set block_start "tostring(")
				(<< block_start (call node_to_cpp depth (get node child 0)))
				(set block_end ")")
			))
			(if (= (get node child 1 value) "int") (then
				(set block_start "(int)")
				(set block_end (call node_to_cpp depth (get node child 0)))
			))
			(remove (get node child) 0 1)
			(remove (get node child) 0 1)
		))
		(if (= (get node value) "then") (then
			(set block_start "{")
			(set block_end "}")
		))
		(if (= (get node value) "else") (then
			(set block_start "else {")
			(set block_end "}")
		))
		(if (= (get node value) "for") (then
			(if (= (# (get node child)) 5) (then
				(set block_start "for (int ")
				(<< block_start (call node_to_cpp depth (get node child 0)))
				(<< block_start " = ")
				(<< block_start (call node_to_cpp depth (get node child 1)))
				(<< block_start "; ")
				(<< block_start (call node_to_cpp depth (get node child 2)))
				(<< block_start "; ")
				(<< block_start (call node_to_cpp depth (get node child 0)))
				(<< block_start " += ")
				(<< block_start (call node_to_cpp depth (get node child 3)))
				(<< block_start ") ")
				(remove (get node child) 0 4)
				(set block_end "")
			))
			(if (= (# (get node child)) 4) (then
				(set block_start "for (const auto &[")
				(<< block_start (call node_to_cpp depth (get node child 0)))
				(<< block_start ",")
				(<< block_start (call node_to_cpp depth (get node child 1)))
				(<< block_start "] : ")
				(<< block_start (call node_to_cpp depth (get node child 2)))
				(<< block_start ") ")
				(remove (get node child) 0 3)
				(set block_end "")
			))
		))
		(if (||
			(= (get node value) "if")
			(= (get node value) "while")
		) (then
			(set block_start (get node value))
			(<< block_start " ")
			(let block_simple int (<> (get node child 0 type) @NODE_EXPR))
			(if block_simple (then
				(<< block_start "(")
			))
			(<< block_start (call node_to_cpp depth (get node child 0)))
			(if block_simple (then
				(<< block_start ")")
			))
			(<< block_start " ")
			(set block_end "")
			(remove (get node child) 0 1)
		))
		(if (= (get node value) "do") (then
			(set block_start "{")
			(set block_end "}")
		))
		(if (= (get node value) "break") (then
			(set block_start "break")
			(set block_end "")
		))
		(if (= (get node value) "?") (then
			(set block_start (call node_to_cpp depth (get node child 0)))
			(<< block_start " ? ")
			(<< block_start (call node_to_cpp depth (get node child 1)))
			(<< block_start " : ")
			(<< block_start (call node_to_cpp depth (get node child 2)))
			(set block_end "")
			(while (> (# (get node child)) 0) (do
				(remove (get node child) 0 1)
			))
		))
		(if (= (get node value) "print") (then
			(set block_start "std::cout << ")
			(set block_end " << std::endl")
		))
		(if (||
			(= (get node value) ">>")
			(= (get node value) "<<")
			(= (get node value) "=")
			(= (get node value) "&&")
			(= (get node value) "||")
			(= (get node value) ">=")
			(= (get node value) "<=")
			(= (get node value) "<>")
			(= (get node value) "+")
			(= (get node value) "-")
			(= (get node value) "*")
			(= (get node value) "/")
			(= (get node value) "^")
			(= (get node value) "%")
			(= (get node value) "&")
			(= (get node value) "|")
			(= (get node value) "~")
			(= (get node value) "<")
			(= (get node value) ">")
		) (then
			(set block_start "(")
			(set block_end ")")

			(if (= (get node value) "=") (then
				(set node value "==")
			))
			(if (= (get node value) "<>") (then
				(set node value "!=")
			))

			(if (&&
				(= (get node value) "<<")
				(= (get node child 0 type) @NODE_STR)
			) (then
				(set node value "+=")
			))
			(insert (get node child) 1 (call node_new @NODE_STR (get node value)))
		))
		(if (= (get node value) "return") (then
			(set block_start "return ")
			(set block_end "")
		))

		(<< s block_start)

		(for i 0 (< i (# (get node child))) 1 (do
			(let node_child (struct node) (get node child i))
			(let indent_needed int (call node_indent_needed node node_child))
			(let indent_depth int (? indent_needed depth (- depth 1)))
			(let indent str "  ")

			(if indent_needed (then
				(<< s "\n")
				(for i 0 (< i indent_depth) 1 (do
					(<< s indent)
				))
			) (else (if (> i 0) (then
				(<< s block_seperator)
			))))

			(let child str (call node_to_cpp indent_depth node_child))
			(<< s child)

			(if (||
				(= (get node value) "")
				(= (get node value) "func")
				(= (get node value) "struct")
				(= (get node value) "do")
				(= (get node value) "then")
				(= (get node value) "else")
			) (then
				(<< s ";")
			))
			(if (&&
				indent_needed
				(= i (- (# (get node child)) 1))
			) (then
				(<< s "\n")
				(for i 0 (< i (- indent_depth 1)) 1 (do
					(<< s indent)
				))
			))
		))

		(<< s block_end)
	))

	(if (<> (get node type) @NODE_EXPR) (then
		(let value str (call node_to_cpp_preprocess node))
		(if (= (get node type) @NODE_COMMENT) (then
			(set value "// ")
			(<< value (get node value))
		))
		; (if (= (get node type) @NODE_CHAR) (then
		; 	(<< s "(int)")
		; ))
		(<< s value)
	))

	(return s)
)
