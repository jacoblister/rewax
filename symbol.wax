(@define MODULE_SYMBOL "Symbol")

(struct node_symbol
	(let name str)
	(let node (struct node))
)

(func dump_symbol (param symbol (arr (struct node_symbol))) (result str)
	(let s str "")
	(for i 0 (< i (# symbol)) 1 (do
		(<< s " ")
		(<< s (get symbol i name))
	))
	(return s)
)

(func node_symbol_scope_node (param symbol (arr (struct node_symbol))) (param node (struct node)) (result (arr (struct node_symbol)))
	(let copy_symbol (arr (struct node_symbol)) (alloc (arr (struct node_symbol))))
	(for i 0 (< i (# symbol)) 1 (do
		(let s (struct node_symbol) (alloc (struct node_symbol)))
		(set s name (get symbol i name))
		(set s node (get symbol i node))
		(insert copy_symbol (# copy_symbol) s)
	))

	(for i 0 (< i (# (get node child))) 1 (do
		(let child (struct node) (get node child i))
		(if (||
			(= (get child value) "struct")
			(= (get child value) "func")
			(= (get child value) "let")
			(= (get child value) "param")
			(= (get child value) "for")
		) (then
			(let s (struct node_symbol) (alloc (struct node_symbol)))
			(set s name (get child child 0 value))
			(set s node child)
			(insert copy_symbol (# copy_symbol) s)
		))
	))

	; (print (get node value))
	; (print (call dump_symbol symbol))
	; (print (call dump_symbol copy_symbol))
	; (print "")

	(return copy_symbol)
)

(func node_symbol_get_node (param symbol (arr (struct node_symbol))) (param type str) (param node (struct node)) (result (struct node))
	(for i (- (# symbol) 1) (>= i 0) -1 (do
		(if (= (get symbol i name) (get node value)) (then
			(if (|| (= type "") (= type (get symbol i node value))) (then
				(return (get symbol i node))
			))
		))
	))
	(call compile_error @MODULE_SYMBOL node "symbol not found")
	(return (get symbol 0 node))
)

(@define NODE_TYPE_NONE 0)
(@define NODE_TYPE_STR 1)
(@define NODE_TYPE_INT 2)
(@define NODE_TYPE_FLOAT 3)
(@define NODE_TYPE_VEC 4)
(@define NODE_TYPE_ARRAY 5)

(func node_symbol_node_type_src (param symbol (arr (struct node_symbol))) (param node (struct node)) (result (struct node))
	(if (||
		(= (get node type) @NODE_PREPROCESS) (= (get node type) @NODE_STR_QUOTE) (= (get node type) @NODE_CHAR) (= (get node type) @NODE_INT) (= (get node type) @NODE_FLOAT)
		(= (get node value) "str") (= (get node value) "int") (= (get node value) "float"))
		(then (return node))
	)

	(if (= (get node type) @NODE_STR) (then
		(let symbol_node (struct node) (call node_symbol_get_node symbol "" node))
		(if (= (get symbol_node value) "func") (then (return node)))
		(if (||
			(= (get symbol_node value) "let")
			(= (get symbol_node value) "param")
			(= (get symbol_node value) "for")
		) (then
			(return (call node_symbol_node_type_src symbol (get symbol_node child 1)))
		))
	))

	(if (= (get node type) @NODE_EXPR) (then
		(if (= (get node value) "=") (then (return node)))
		(if (= (get node value) "#") (then (return node)))

		(if (= (get node value) "vec") (then (return node)))
		(if (= (get node value) "arr") (then (return node)))
		(if (= (get node value) "struct") (then (return node)))

		(if (= (get node value) "cast") (then (return (get node child 1))))
		(if (= (get node value) "?") (then (return (get node child 1))))

		(if (= (get node value) "call") (then
			(let symbol_node (struct node) (call node_symbol_get_node symbol "" (get node child 0)))
			(for i 1 (< i (# (get symbol_node child))) 1 (do
				(if (= (get symbol_node child i value) "result") (then
					; (call compile_error @MODULE_SYMBOL node (get symbol_node child i child 0 value))
					(return (get symbol_node child i child 0))
				))
			))
			(call compile_error @MODULE_SYMBOL node "function result not found")
		))

		(if (= (get node value) "get") (then
			(let target_node (struct node))

			(if (= (get node child 0 type) @NODE_STR) (then
				(let symbol_node (struct node) (call node_symbol_get_node symbol "" (get node child 0)))
				(if (&& (<> (get symbol_node value) "let") (<> (get symbol_node value) "param")) (then
					(call compile_error @MODULE_SYMBOL node "symbol not variable")
				))
				(set target_node (get symbol_node child 1))
			) (else (if (= (get node child 0 value) "get") (then
				(let get_node_type (struct node) (call node_symbol_node_type_src symbol (get node child 0)))
				(set target_node get_node_type)
			) (else
				(call compile_error @MODULE_SYMBOL node "bad get expression")
			))))

			(for i 1 (< i (# (get node child))) 1 (do
				(if (= (get target_node value) "vec") (then
					(set target_node (get target_node child 1))
				) (else (if (= (get target_node value) "arr") (then
					(set target_node (get target_node child 0))
				) (else (if (= (get target_node value) "str") (then
					(return (call node_new @NODE_TYPE_INT ""))
				) (else (if (= (get target_node value) "struct") (then
					(let symbol_node (struct node) (call node_symbol_get_node symbol "struct" (get target_node child 0)))
					(let found int 0)
					(for j 1 (< j (# (get symbol_node child))) 1 (do
						(if (&&
							(= (get symbol_node child j value) "let")
							(= (get symbol_node child j child 0 value) (get node child i value))
						) (then
							(set target_node (get symbol_node child j child 1))
							(set found 1)
						))
					))

					(if (! found) (then
						(call compile_error @MODULE_SYMBOL node "struct member not found")
					))
				))))))))
			))
			(return (call node_symbol_node_type_src symbol target_node))
		))

		; default expression (eg +)
		; (return (call node_symbol_node_type_src symbol (get node child (- (# (get node child)) 1))))
		(return (call node_symbol_node_type_src symbol (get node child 0)))
	))

	(call compile_error @MODULE_SYMBOL node "source node not established")
	(return node)
)

(func node_symbol_node_type (param symbol (arr (struct node_symbol))) (param node (struct node)) (result int)
	(let src_node (struct node) (call node_symbol_node_type_src symbol node))

	(if (= (get src_node type) @NODE_PREPROCESS) (then (return @NODE_PREPROCESS)))
	(if (= (get src_node type) @NODE_STR_QUOTE) (then (return @NODE_TYPE_STR)))
	(if (= (get src_node type) @NODE_CHAR) (then (return @NODE_TYPE_INT)))
	(if (= (get src_node type) @NODE_INT) (then (return @NODE_TYPE_INT)))
	(if (= (get src_node type) @NODE_FLOAT) (then (return @NODE_TYPE_FLOAT)))

	(if (= (get src_node value) "=") (then (return @NODE_TYPE_INT)))
	(if (= (get src_node value) "#") (then (return @NODE_TYPE_INT)))
	(if (= (get src_node value) "str") (then (return @NODE_TYPE_STR)))
	(if (= (get src_node value) "int") (then (return @NODE_TYPE_INT)))
	(if (= (get src_node value) "float") (then (return @NODE_TYPE_FLOAT)))
	(if (= (get src_node value) "call") (then (return @NODE_TYPE_INT)))

	; (call compile_error @MODULE_SYMBOL node "type not found")
	(return @NODE_TYPE_NONE)
)
